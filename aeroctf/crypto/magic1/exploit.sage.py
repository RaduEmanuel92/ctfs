

# This file was *autogenerated* from the file exploit.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5405053190768240950975482839552589374748349681382030872360550121041249100085609471 = Integer(5405053190768240950975482839552589374748349681382030872360550121041249100085609471); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
flag = 'd9a103a6006bfba17074ef571011d8eededdf851b355bdc4795616744066433695b9e9201f6deff7577c03ba690d4d517bdaae'.decode('hex')
c = _sage_const_5405053190768240950975482839552589374748349681382030872360550121041249100085609471 

p = factor(_sage_const_2 *c)
print(p)
perm = []

for item in p:
    for i in range(item[_sage_const_1 ]):
        perm.append(item[_sage_const_0 ])

import itertools

nn = -_sage_const_1 
found = False
for k in range(_sage_const_1 , len(perm) + _sage_const_1 ):
    if found:
        break
    for item in itertools.combinations(perm, k):
        n = _sage_const_1 
        for i in item:
            n *= i
        if (_sage_const_1 /_sage_const_2 *n*(n**_sage_const_2  + _sage_const_1 ) - n) % (n**_sage_const_2 ) == c:
            print(n)
            nn = n
            found = True
            break

n = nn
key = _sage_const_1 /_sage_const_2 *n*(n**_sage_const_2  + _sage_const_1 ) - n
from Crypto.Util.number import *

ct = bytes_to_long(flag)
pt = int(key)^int(ct)
print(['ct', ct])
print(['pt', pt])
print(['key', key])
print([long_to_bytes(pt)])

