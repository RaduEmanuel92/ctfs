#!/usr/bin/python


from __future__ import print_function
import random,os,sys,binascii
from decimal import *
from pwn import *



'''
    nc crypto.2020.chall.actf.co 20601
'''

def check_cond(a,b,c):
    if b*b < 4*a*c or a==0 or b==0 or c==0 or Decimal(b*b-4*a*c).sqrt().to_integral_value()**2==b*b-4*a*c or abs(a)>1000 or abs(b)>1000 or abs(c)>1000:
        return False
    
    return True    


def keystream(key):
	random.seed(int(os.environ["seed"]))
	e = random.randint(100,1000)
	while 1:
		d = random.randint(1,100)
		ret = Decimal('0.'+str(key ** e).split('.')[-1])
		for i in range(d):
			ret*=2
		yield int((ret//1)%2)
		e+=1

def compute_key(a,b,c):
    return (Decimal(b*b-4*a*c).sqrt() - Decimal(b))/Decimal(a*2)


def compute_xor(enc_bitstream):
    return True


def main():
    
    cand_keys = []
    flags = []
    for a in range(1000):
        for b in range(1000):
            for c in range(1000):
                if check_cond(a,b,c):
                    print("Found cands a,b,c -> {}, {}, {}".format(a,b,c))
                    key = compute_key(a,b,c)
                    print("Key: -> {}".format(key))
                    cand_keys.append(key)
                    conn = remote("crypto.2020.chall.actf.co", 20601)
                    conn.recvuntil(": ", timeout=5, drop=True)
                    conn.sendline(str(a))    
                    conn.recvuntil(": ", timeout=5, drop=True)
                    conn.sendline(str(b))
                    conn.recvuntil(": ", timeout=5, drop=True)
                    conn.sendline(str(c))
                    flag_bitstream = conn.recvline()
                    flags.append(flags)


    print("Keys:\n {}".format(cand_keys))
    print("Flags:\n {}".format(flags))


if __name__ == "__main__":
    main()